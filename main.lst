     1                                  global FEATURE
     2                                  global CARTOON
     3                                  global DOCUMENTARY
     4                                  
     5                                  global  HAND_DRAWN
     6                                  global  PUPPET
     7                                  global  PLASTICINE
     8                                  global  hand_drawnstr
     9                                  global  puppetstr      
    10                                  global  plasticinestr  
    11                                  
    12                                  %include "macros.mac"
     1                              <1> ; macros.mac - файл с макроопределениями
     2                              <1> 
     3                              <1> extern  fopen
     4                              <1> extern  fscanf
     5                              <1> extern  fclose
     6                              <1> extern  fprintf
     7                              <1> extern  printf
     8                              <1> extern  stdout
     9                              <1> extern  time
    10                              <1> extern  srand
    11                              <1> extern  strcmp
    12                              <1> extern  atoi
    13                              <1> extern  clock
    14                              <1> 
    15                              <1> extern  InContainer
    16                              <1> extern  InRndContainer
    17                              <1> extern  OutContainer
    18                              <1> 
    19                              <1> ;-------------------------------------------------------------
    20                              <1> ; Вывод строки символов из буфера
    21                              <1> %macro	PrintStrBuf 2
    22                              <1>         mov rdi, %2
    23                              <1>         mov rsi, %1
    24                              <1>         xor rax, rax
    25                              <1>         call fprintf
    26                              <1> %endmacro
    27                              <1> 
    28                              <1> ;-------------------------------------------------------------
    29                              <1> ; Вывод строки, передаваемой непосредственно макросу
    30                              <1> %macro  PrintStr    2
    31                              <1>     section .data
    32                              <1>         %%arg1  db  %1,0        ; first argument
    33                              <1>     section .text               ; the printf arguments
    34                              <1>         mov rdi, %2
    35                              <1>         mov rsi, %%arg1
    36                              <1>         mov rax, 0              ; no floating point
    37                              <1>         call fprintf
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> ;-------------------------------------------------------------
    41                              <1> ; Вывод строки, передаваемой непосредственно макросу
    42                              <1> ; с переводом на следующую строку
    43                              <1> %macro  PrintStrLn    2
    44                              <1>     section .data
    45                              <1>         %%arg1  db  %1,10,0     ; first argument
    46                              <1>     section .text               ; the printf arguments
    47                              <1>         mov rdi, %2
    48                              <1>         mov rsi, %%arg1
    49                              <1>         mov rax, 0              ; no floating point
    50                              <1>         call fprintf
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> ;-------------------------------------------------------------
    54                              <1> ; Вывод целого числа
    55                              <1> %macro  PrintInt    2
    56                              <1>     section .data
    57                              <1>         %%arg1  db  "%d",0     ; first argument
    58                              <1>     section .text               ; the printf arguments
    59                              <1>         mov rdi, %2
    60                              <1>         mov rsi, %%arg1
    61                              <1>         mov rdx, %1
    62                              <1>         mov rax, 0              ; no floating point
    63                              <1>         call fprintf
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;-------------------------------------------------------------
    67                              <1> ; Вывод 64-разрядного беззнакового целого числа
    68                              <1> %macro  PrintLLUns    2
    69                              <1>     section .data
    70                              <1>         %%arg1  db  "%llu",0     ; first argument
    71                              <1>     section .text               ; the printf arguments
    72                              <1>         mov rdi, %2
    73                              <1>         mov rsi, %%arg1
    74                              <1>         mov rdx, %1
    75                              <1>         mov rax, 0              ; no floating point
    76                              <1>         call fprintf
    77                              <1> %endmacro
    78                              <1> 
    79                              <1> ;-------------------------------------------------------------
    80                              <1> ; Вывод действительного числа двойной точности
    81                              <1> %macro  PrintDouble    2
    82                              <1>     section .data
    83                              <1>         %%arg1  db  "%lg",0     ; first argument
    84                              <1>     section .text               ; the printf arguments
    85                              <1>         mov rdi, %2
    86                              <1>         mov rsi, %%arg1
    87                              <1>         movsd xmm0, %1
    88                              <1>         mov rax, 1              ; no floating point
    89                              <1>         call fprintf
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> ;-------------------------------------------------------------
    93                              <1> ; Вывод содержимого контейнера
    94                              <1> %macro  PrintContainer    3
    95                              <1>     mov     rdi, %1
    96                              <1>     mov     esi, %2
    97                              <1>     mov     rdx, %3
    98                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
    99                              <1>     call    OutContainer
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;-------------------------------------------------------------
   103                              <1> ; Открытие файла для чтения, записи
   104                              <1> %macro  FileOpen   3
   105                              <1>     section .data
   106                              <1>         %%rw  db  %2,0          ; признак доступа
   107                              <1>     section .text               ; the printf arguments
   108                              <1>         mov     rdi, %1         ; адрес строки открываемого файла
   109                              <1>         mov     rsi, %%rw       ; строка определяющая чтение-запись. Задается явно
   110                              <1>         ; Или аналог:
   111                              <1>         ;lea     rsi, [%%rw]    ; строка определяющая чтение-запись. Задается явно
   112                              <1>         mov     rax, 0          ; нет чисел с плавающей точкой
   113                              <1>         call    fopen
   114                              <1>         mov     [%3], rax
   115                              <1> %endmacro
   116                              <1> 
   117                              <1> ;-------------------------------------------------------------
   118                              <1> ; Закрытие открытого файла
   119                              <1> %macro  FileClose   1
   120                              <1>     mov     rdi, %1             ; передача указателя на закрываемый файл
   121                              <1>     mov     rax, 0              ; нет чисел с плавающей точкой
   122                              <1>     call    fclose
   123                              <1> %endmacro
   124                              <1> 
    13                                  
    14                                  section .data
    15 00000000 01000000                    FEATURE        dd     1 
    16 00000004 02000000                    CARTOON        dd     2
    17 00000008 03000000                    DOCUMENTARY    dd     3
    18                                      
    19 0000000C 01000000                    HAND_DRAWN     dd     1
    20 00000010 02000000                    PUPPET         dd     2
    21 00000014 03000000                    PLASTICINE     dd     3
    22                                  
    23                                  
    24 00000018 68616E642064726177-         hand_drawnstr  db     "hand drawn",0
    24 00000021 6E00               
    25 00000023 70757070657400              puppetstr      db     "puppet",0
    26 0000002A 706C6173746963696E-         plasticinestr  db     "plasticine",0
    26 00000033 6500               
    27                                  
    28 00000035 000000000000F03F            oneDouble      dq     1.0
    29 0000003D 496E636F7272656374-         erMsg1         db     "Incorrect number of arguments = %d: ",10,0
    29 00000046 206E756D626572206F-
    29 0000004F 6620617267756D656E-
    29 00000058 7473203D2025643A20-
    29 00000061 0A00               
    30 00000063 2D6E00                      rndGen         db     "-n",0
    31 00000066 2D6600                      fileGen        db     "-f",0
    32 00000069 696E636F7272656374-         errMessage1    db     "incorrect command line!", 10,"  Waited:",10
    32 00000072 20636F6D6D616E6420-
    32 0000007B 6C696E65210A202057-
    32 00000084 61697465643A0A     
    33 0000008B 2020202020636F6D6D-                        db     "     command -f infile outfile",10,"  Or:",10
    33 00000094 616E64202D6620696E-
    33 0000009D 66696C65206F757466-
    33 000000A6 696C650A20204F723A-
    33 000000AF 0A                 
    34 000000B0 2020202020636F6D6D-                        db     "     command -n number outfile",10,0
    34 000000B9 616E64202D6E206E75-
    34 000000C2 6D626572206F757466-
    34 000000CB 696C650A00         
    35 000000D0 696E636F7272656374-         errMessage2    db     "incorrect qualifier value!", 10,"  Waited:",10
    35 000000D9 207175616C69666965-
    35 000000E2 722076616C7565210A-
    35 000000EB 20205761697465643A-
    35 000000F4 0A                 
    36 000000F5 2020202020636F6D6D-                        db     "     command -f infile outfile",10,"  Or:",10
    36 000000FE 616E64202D6620696E-
    36 00000107 66696C65206F757466-
    36 00000110 696C650A20204F723A-
    36 00000119 0A                 
    37 0000011A 2020202020636F6D6D-                        db     "     command -n number outfile",10,0
    37 00000123 616E64202D6E206E75-
    37 0000012C 6D626572206F757466-
    37 00000135 696C650A00         
    38 0000013A 00000000                    len            dd     0      
    39                                  section .bss
    40 00000000 <res 00000004>              argc           resd   1
    41 00000004 <res 00000004>              num            resd   1
    42 00000008 <res 00000008>              sum            resq   1
    43 00000010 <res 00000008>              start          resq   1      
    44 00000018 <res 00000008>              delta          resq   1      
    45 00000020 <res 00000010>              startTime      resq   2      
    46 00000030 <res 00000010>              endTime        resq   2      
    47 00000040 <res 00000010>              deltaTime      resq   2      
    48 00000050 <res 00000008>              ifst           resq   1      
    49 00000058 <res 00000008>              ofst1          resq   1       
    50 00000060 <res 00000008>              ofst2          resq   1      
    51 00000068 <res 00027100>              cont           resb   160000  
    52                                  section .text 
    53                                      global main
    54                                  main:
    55 00000000 55                      push rbp
    56 00000001 4889E5                  mov rbp,rsp
    57                                      
    58 00000004 893C25[00000000]            mov dword [argc], edi 
    59 0000000B 4989FC                      mov r12, rdi 
    60 0000000E 4989F5                      mov r13, rsi 
    61                                  
    62 00000011 4983FC04                    cmp r12, 4     
    63 00000015 741F                        je .next1
    64                                      PrintStrBuf errMessage1, [stdout]
    64 00000017 488B3C25[00000000]  <1>  mov rdi, %2
    64 0000001F 48BE-               <1>  mov rsi, %1
    64 00000021 [6900000000000000]  <1>
    64 00000029 4831C0              <1>  xor rax, rax
    64 0000002C E8(00000000)        <1>  call fprintf
    65 00000031 E973030000                  jmp .return
    66                                      
    67                                  .next1:
    68                                      PrintStrLn "Start", [stdout]
    68                              <1>  section .data
    68 0000013E 53746172740A00      <1>  %%arg1 db %1,10,0
    68                              <1>  section .text
    68 00000036 488B3C25[00000000]  <1>  mov rdi, %2
    68 0000003E 48BE-               <1>  mov rsi, %%arg1
    68 00000040 [3E01000000000000]  <1>
    68 00000048 B800000000          <1>  mov rax, 0
    68 0000004D E8(00000000)        <1>  call fprintf
    69 00000052 48BF-                       mov rdi, rndGen     
    69 00000054 [6300000000000000] 
    70 0000005C 498B7508                    mov rsi, [r13+8]    
    71 00000060 B903000000                  mov rcx, 3          
    72 00000065 FC                          cld                 
    73 00000066 F3A6                        repe cmpsb
    74 00000068 743B                        je .next2
    75 0000006A 48BF-                       mov rdi, fileGen
    75 0000006C [6600000000000000] 
    76 00000074 498B7508                    mov rsi, [r13+8]    
    77 00000078 B903000000                  mov rcx, 3          
    78 0000007D FC                          cld                 
    79 0000007E F3A6                        repe cmpsb
    80 00000080 0F8482000000                je .next3
    81                                      PrintStrBuf errMessage2, [stdout]
    81 00000086 488B3C25[00000000]  <1>  mov rdi, %2
    81 0000008E 48BE-               <1>  mov rsi, %1
    81 00000090 [D000000000000000]  <1>
    81 00000098 4831C0              <1>  xor rax, rax
    81 0000009B E8(00000000)        <1>  call fprintf
    82 000000A0 E904030000                  jmp .return   
    83                                      
    84                                  .next2:
    85 000000A5 498B7D10                    mov rdi, [r13+16]
    86 000000A9 E8(00000000)                call atoi
    87 000000AE 890425[04000000]            mov [num], eax
    88 000000B5 8B0425[04000000]            mov eax, [num]
    89 000000BC 83F801                      cmp eax, 1
    90 000000BF 0F8C88020000                jl .fall1
    91 000000C5 3D10270000                  cmp eax, 10000
    92 000000CA 0F8F7D020000                jg .fall1
    93 000000D0 4831FF                      xor     rdi, rdi
    94 000000D3 4831C0                      xor     rax, rax
    95 000000D6 E8(00000000)                call    time
    96 000000DB 4889C7                      mov     rdi, rax
    97 000000DE 4831C0                      xor     rax, rax
    98 000000E1 E8(00000000)                call    srand
    99 000000E6 48BF-                       mov     rdi, cont  
    99 000000E8 [6800000000000000] 
   100 000000F0 48BE-                       mov     rsi, len    
   100 000000F2 [3A01000000000000] 
   101 000000FA 8B1425[04000000]            mov     edx, [num]
   102 00000101 E8(00000000)                call    InRndContainer
   103 00000106 EB56                        jmp .task2
   104                                  
   105                                  .next3:
   106                                      FileOpen [r13+16], "r", ifst
   106                              <1>  section .data
   106 00000145 7200                <1>  %%rw db %2,0
   106                              <1>  section .text
   106 00000108 498B7D10            <1>  mov rdi, %1
   106 0000010C 48BE-               <1>  mov rsi, %%rw
   106 0000010E [4501000000000000]  <1>
   106                              <1> 
   106                              <1> 
   106 00000116 B800000000          <1>  mov rax, 0
   106 0000011B E8(00000000)        <1>  call fopen
   106 00000120 48890425[50000000]  <1>  mov [%3], rax
   107 00000128 48BF-                       mov     rdi, cont          
   107 0000012A [6800000000000000] 
   108 00000132 48BE-                       mov     rsi, len          
   108 00000134 [3A01000000000000] 
   109 0000013C 488B1425[50000000]          mov     rdx, [ifst]         
   110 00000144 4831C0                      xor     rax, rax
   111 00000147 E8(00000000)                call    InContainer         
   112                                      FileClose [ifst]
   112 0000014C 488B3C25[50000000]  <1>  mov rdi, %1
   112 00000154 B800000000          <1>  mov rax, 0
   112 00000159 E8(00000000)        <1>  call fclose
   113                                  
   114                                  .task2:
   115                                      PrintStrLn "Filled container:", [stdout]
   115                              <1>  section .data
   115 00000147 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   115 00000150 6E7461696E65723A0A- <1>
   115 00000159 00                  <1>
   115                              <1>  section .text
   115 0000015E 488B3C25[00000000]  <1>  mov rdi, %2
   115 00000166 48BE-               <1>  mov rsi, %%arg1
   115 00000168 [4701000000000000]  <1>
   115 00000170 B800000000          <1>  mov rax, 0
   115 00000175 E8(00000000)        <1>  call fprintf
   116                                      PrintContainer cont, [len], [stdout]
   116 0000017A 48BF-               <1>  mov rdi, %1
   116 0000017C [6800000000000000]  <1>
   116 00000184 8B3425[3A010000]    <1>  mov esi, %2
   116 0000018B 488B1425[00000000]  <1>  mov rdx, %3
   116 00000193 B800000000          <1>  mov rax, 0
   116 00000198 E8(00000000)        <1>  call OutContainer
   117                                      FileOpen [r13+24], "w", ofst1
   117                              <1>  section .data
   117 0000015A 7700                <1>  %%rw db %2,0
   117                              <1>  section .text
   117 0000019D 498B7D18            <1>  mov rdi, %1
   117 000001A1 48BE-               <1>  mov rsi, %%rw
   117 000001A3 [5A01000000000000]  <1>
   117                              <1> 
   117                              <1> 
   117 000001AB B800000000          <1>  mov rax, 0
   117 000001B0 E8(00000000)        <1>  call fopen
   117 000001B5 48890425[58000000]  <1>  mov [%3], rax
   118                                      PrintStrLn "Filled container:", [ofst1]
   118                              <1>  section .data
   118 0000015C 46696C6C656420636F- <1>  %%arg1 db %1,10,0
   118 00000165 6E7461696E65723A0A- <1>
   118 0000016E 00                  <1>
   118                              <1>  section .text
   118 000001BD 488B3C25[58000000]  <1>  mov rdi, %2
   118 000001C5 48BE-               <1>  mov rsi, %%arg1
   118 000001C7 [5C01000000000000]  <1>
   118 000001CF B800000000          <1>  mov rax, 0
   118 000001D4 E8(00000000)        <1>  call fprintf
   119                                      PrintContainer cont, [len], [ofst1]
   119 000001D9 48BF-               <1>  mov rdi, %1
   119 000001DB [6800000000000000]  <1>
   119 000001E3 8B3425[3A010000]    <1>  mov esi, %2
   119 000001EA 488B1425[58000000]  <1>  mov rdx, %3
   119 000001F2 B800000000          <1>  mov rax, 0
   119 000001F7 E8(00000000)        <1>  call OutContainer
   120                                      FileClose [ofst1]
   120 000001FC 488B3C25[58000000]  <1>  mov rdi, %1
   120 00000204 B800000000          <1>  mov rax, 0
   120 00000209 E8(00000000)        <1>  call fclose
   121 0000020E B8E4000000                  mov rax, 228 
   122 00000213 31FF                        xor edi, edi  
   123 00000215 488D3425[20000000]          lea rsi, [startTime]
   124 0000021D 0F05                        syscall    
   125                                                                
   126 0000021F B8E4000000                  mov rax, 228   
   127 00000224 31FF                        xor edi, edi  
   128 00000226 488D3425[30000000]          lea rsi, [endTime]
   129 0000022E 0F05                        syscall        
   130                                                     
   131 00000230 488B0425[30000000]          mov rax, [endTime]
   132 00000238 482B0425[20000000]          sub rax, [startTime]
   133 00000240 488B1C25[38000000]          mov rbx, [endTime+8]
   134 00000248 488B0C25[28000000]          mov rcx, [startTime+8]
   135 00000250 4839CB                      cmp rbx, rcx
   136 00000253 7D0A                        jge .subNanoOnly
   137 00000255 48FFC8                      dec rax
   138 00000258 4881C300CA9A3B              add rbx, 1000000000
   139                                      
   140                                  .subNanoOnly:
   141 0000025F 482B1C25[28000000]          sub rbx, [startTime+8]
   142 00000267 48890425[40000000]          mov [deltaTime], rax
   143 0000026F 48891C25[48000000]          mov [deltaTime+8], rbx
   144                                  
   145                                      PrintStr "Calculaton time = ", [stdout]
   145                              <1>  section .data
   145 0000016F 43616C63756C61746F- <1>  %%arg1 db %1,0
   145 00000178 6E2074696D65203D20- <1>
   145 00000181 00                  <1>
   145                              <1>  section .text
   145 00000277 488B3C25[00000000]  <1>  mov rdi, %2
   145 0000027F 48BE-               <1>  mov rsi, %%arg1
   145 00000281 [6F01000000000000]  <1>
   145 00000289 B800000000          <1>  mov rax, 0
   145 0000028E E8(00000000)        <1>  call fprintf
   146                                      PrintLLUns [deltaTime], [stdout]
   146                              <1>  section .data
   146 00000182 256C6C7500          <1>  %%arg1 db "%llu",0
   146                              <1>  section .text
   146 00000293 488B3C25[00000000]  <1>  mov rdi, %2
   146 0000029B 48BE-               <1>  mov rsi, %%arg1
   146 0000029D [8201000000000000]  <1>
   146 000002A5 488B1425[40000000]  <1>  mov rdx, %1
   146 000002AD B800000000          <1>  mov rax, 0
   146 000002B2 E8(00000000)        <1>  call fprintf
   147                                      PrintStr " sec, ", [stdout]
   147                              <1>  section .data
   147 00000187 207365632C2000      <1>  %%arg1 db %1,0
   147                              <1>  section .text
   147 000002B7 488B3C25[00000000]  <1>  mov rdi, %2
   147 000002BF 48BE-               <1>  mov rsi, %%arg1
   147 000002C1 [8701000000000000]  <1>
   147 000002C9 B800000000          <1>  mov rax, 0
   147 000002CE E8(00000000)        <1>  call fprintf
   148                                      PrintLLUns [deltaTime+8], [stdout]
   148                              <1>  section .data
   148 0000018E 256C6C7500          <1>  %%arg1 db "%llu",0
   148                              <1>  section .text
   148 000002D3 488B3C25[00000000]  <1>  mov rdi, %2
   148 000002DB 48BE-               <1>  mov rsi, %%arg1
   148 000002DD [8E01000000000000]  <1>
   148 000002E5 488B1425[48000000]  <1>  mov rdx, %1
   148 000002ED B800000000          <1>  mov rax, 0
   148 000002F2 E8(00000000)        <1>  call fprintf
   149                                      PrintStr " nsec", [stdout]
   149                              <1>  section .data
   149 00000193 206E73656300        <1>  %%arg1 db %1,0
   149                              <1>  section .text
   149 000002F7 488B3C25[00000000]  <1>  mov rdi, %2
   149 000002FF 48BE-               <1>  mov rsi, %%arg1
   149 00000301 [9301000000000000]  <1>
   149 00000309 B800000000          <1>  mov rax, 0
   149 0000030E E8(00000000)        <1>  call fprintf
   150                                      PrintStr 10, [stdout]
   150                              <1>  section .data
   150 00000199 0A00                <1>  %%arg1 db %1,0
   150                              <1>  section .text
   150 00000313 488B3C25[00000000]  <1>  mov rdi, %2
   150 0000031B 48BE-               <1>  mov rsi, %%arg1
   150 0000031D [9901000000000000]  <1>
   150 00000325 B800000000          <1>  mov rax, 0
   150 0000032A E8(00000000)        <1>  call fprintf
   151                                      PrintStrLn "Stop", [stdout]
   151                              <1>  section .data
   151 0000019B 53746F700A00        <1>  %%arg1 db %1,10,0
   151                              <1>  section .text
   151 0000032F 488B3C25[00000000]  <1>  mov rdi, %2
   151 00000337 48BE-               <1>  mov rsi, %%arg1
   151 00000339 [9B01000000000000]  <1>
   151 00000341 B800000000          <1>  mov rax, 0
   151 00000346 E8(00000000)        <1>  call fprintf
   152 0000034B EB5C                        jmp .return
   153                                      
   154                                  .fall1:
   155                                      PrintStr "incorrect number of figures = ", [stdout]
   155                              <1>  section .data
   155 000001A1 696E636F7272656374- <1>  %%arg1 db %1,0
   155 000001AA 206E756D626572206F- <1>
   155 000001B3 662066696775726573- <1>
   155 000001BC 203D2000            <1>
   155                              <1>  section .text
   155 0000034D 488B3C25[00000000]  <1>  mov rdi, %2
   155 00000355 48BE-               <1>  mov rsi, %%arg1
   155 00000357 [A101000000000000]  <1>
   155 0000035F B800000000          <1>  mov rax, 0
   155 00000364 E8(00000000)        <1>  call fprintf
   156                                      PrintInt [num], [stdout]
   156                              <1>  section .data
   156 000001C0 256400              <1>  %%arg1 db "%d",0
   156                              <1>  section .text
   156 00000369 488B3C25[00000000]  <1>  mov rdi, %2
   156 00000371 48BE-               <1>  mov rsi, %%arg1
   156 00000373 [C001000000000000]  <1>
   156 0000037B 488B1425[04000000]  <1>  mov rdx, %1
   156 00000383 B800000000          <1>  mov rax, 0
   156 00000388 E8(00000000)        <1>  call fprintf
   157                                      PrintStrLn ". Set 0 < number <= 10000", [stdout]
   157                              <1>  section .data
   157 000001C3 2E205365742030203C- <1>  %%arg1 db %1,10,0
   157 000001CC 206E756D626572203C- <1>
   157 000001D5 3D2031303030300A00  <1>
   157                              <1>  section .text
   157 0000038D 488B3C25[00000000]  <1>  mov rdi, %2
   157 00000395 48BE-               <1>  mov rsi, %%arg1
   157 00000397 [C301000000000000]  <1>
   157 0000039F B800000000          <1>  mov rax, 0
   157 000003A4 E8(00000000)        <1>  call fprintf
   158                                      
   159                                  .return:
   160 000003A9 C9                          leave
   161 000003AA C3                          ret
